
@page "/Cobros"
@page "/Cobros/{CobroId:int}"

@using Parcial2_ap2_2018_0553.BLL;
@using Parcial2_ap2_2018_0553.Models;
@using Blazored.Toast
@using Blazored.Toast.Services

@inject IToastService Toast

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header" style="background-color: #90C2E7">
            <h1 style="color:black; text-align: center; font-family: 'Times New Roman'; font-style: italic;">Registro de Cobros</h1>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col form-group" align="left">
                    <label>Cobro Id</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Cobro.CobroId" class="form-control" />
                        <div class="input-group-append">
                            <button type="button" class="btn btn-outline-info" @onclick="Buscar">
                                <i class="oi oi-magnifying-glass" />Buscar
                            </button>
                        </div>
                    </div>
                </div>

                <div class="col form-group" align="right">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                </div>

            </div>

            <div class="form-group">
                <label>Cliente</label>
                <InputSelect @bind-Value="Cobro.ClienteId" class="form-control" @onclick="Ventaspendientes">
                    <option value="0" disabled selected>Seleccionar Cliente</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClienteId">@item.Nombres</option>
                    }
                </InputSelect>
            </div>

            <div class="card-header" style="background-color: #90C2E7;">
                <h2 style="color:black; font-family: 'Times New Roman'">Cobros Detalle</h2>
            </div>
            <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                <table class="table table-striped">
                    <thead style="background-color: lightseagreen;">
                        <tr>
                            <th style="font-family: 'Courier New'">Id</th>
                            <th style="font-family: 'Courier New'">Fecha</th>
                            <th style="font-family: 'Courier New'">Monto</th>
                            <th style="font-family: 'Courier New'">Balance</th>
                            <th style="font-family: 'Courier New'">Cobrado</th>
                            <th style="font-family: 'Courier New'">Pagar</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white" style="background-color: floralwhite">
                        @foreach (var item in Cobro.Detalle)
                        {
                            <tr>
                                <td>@item.VentaId</td>
                                <td>@item.Venta.Fecha</td>
                                <td>@item.Venta.Monto</td>
                                <td>@item.Venta.Balance</td>
                                <td>@item.Cobrado</td>
                                <th><input type="checkbox" @onchange="@(() => cobrar(item))"/></th>
                            </tr>
                         }
                    </tbody>
                </table>
            </div>
            <div class="form-group">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="form-group row m-1">
                            <label class="col-form-label">Totales</label>
                            <div class="input-group col-sm-3">
                                <InputNumber @bind-Value="Cobro.Totales" readonly class="form-control" />
                            </div>
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-group row">
                            <label class="col-form-label">Total Cobrado</label>

                            <div class="col-sm-3">
                                <InputNumber @bind-Value="Cobro.TotalCobro" readonly class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="border-info">
                        <h5>Observaciones</h5>
                        <InputTextArea @bind-Value="Cobro.Observaciones" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>

                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <i class="oi oi-file mr-2" />Nuevo
                    </button>

                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-account-login" style="transform:rotate(90deg)" />Guardar
                    </button>

                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash mr-2" />Eliminar
                    </button>

                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int CobroId { get; set; }
    Cobros Cobro = new Cobros();
    List<Clientes> ListaClientes = new List<Clientes>();

    protected override void OnInitialized()
    {
        Nuevo();
    }
    public void Buscar()
    {
        if(Cobro.CobroId > 0)
        {
            var encontrado = CobrosBLL.Buscar(Cobro.CobroId);
            if(encontrado != null)
            {
                this.Cobro = encontrado;
            }
            else
            {
                Toast.ShowWarning("No encontrado");
            }
        }
        else
        {
            Toast.ShowWarning("Debe ingresar un id valido para buscar cobro");
        }
    }
    public void Nuevo()
    {
        Cobro = new Cobros();
        ListaClientes = ClientesBLL.GetList(c => true);
        Cobro.Fecha = DateTime.Now;
    }
    public void Eliminar()
    {
        bool elimino;
        elimino = CobrosBLL.Eliminar(Cobro.CobroId);

        if (elimino)
        {
            Nuevo();
            Toast.ShowSuccess("Se ha eliminado correctamente");
        }
        else
        {
            Toast.ShowWarning("No fue posible eliminar");
        }
    }
    public void Guardar()
    {
        bool guardo;
        if(Cobro.CobroId == 0)
        {
            Cobro.Detalle.RemoveAll(e => e.Cobrado == 0);
            guardo = CobrosBLL.Guardar(Cobro);

            if (guardo)
            {
                Nuevo();
                Toast.ShowSuccess("Se ha guardado correctamente");
            }
            else
            {
                Toast.ShowWarning("No fue posible guardar este cobro");
            }
        }
        else
        {
            Toast.ShowWarning("No se pueden modificar los cobros");
        }
    }

    private void cobrar(CobrosDetalle cobro)
    {
        if(cobro.Cobrado == 0)
        {
            cobro.Cobrado += cobro.Venta.Balance;
            Cobro.TotalCobro += cobro.Venta.Balance;
            cobro.Venta.Balance = 0;
            Cobro.Totales++;
        }
        else
        {
            cobro.Venta.Balance += cobro.Cobrado;
            Cobro.TotalCobro -= cobro.Venta.Balance;
            cobro.Cobrado -= cobro.Venta.Balance;
            Cobro.Totales--;
        }
    }

    private void Ventaspendientes()
    {
        Cobro.Totales = 0;
        Cobro.TotalCobro = 0;
        Cobro.Observaciones = string.Empty;
        Cobro.Detalle = VentasBLL.VentasPendientes(Cobro.ClienteId);
    }
}